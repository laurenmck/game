// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_int64 = require("bs-platform/lib/js/caml_int64.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

var Overflow = /* @__PURE__ */Caml_exceptions.create("CS17SetupGame-Connect4.Overflow");

function $plus(a, b) {
  var c = a + b | 0;
  if ((a ^ b | a ^ Pervasives.lnot(c)) < 0) {
    return c;
  }
  throw {
        RE_EXN_ID: Overflow,
        Error: new Error()
      };
}

function $neg(a, b) {
  var c = a - b | 0;
  if ((a ^ Pervasives.lnot(b) | b ^ c) < 0) {
    return c;
  }
  throw {
        RE_EXN_ID: Overflow,
        Error: new Error()
      };
}

function $star(a, b) {
  var c = Math.imul(a, b);
  if (Caml_int64.eq(Caml_int64.of_int32(c), Caml_int64.mul(Caml_int64.of_int32(a), Caml_int64.of_int32(b)))) {
    return c;
  }
  throw {
        RE_EXN_ID: Overflow,
        Error: new Error()
      };
}

function $slash(a, b) {
  if (a === Pervasives.min_int && b === -1) {
    throw {
          RE_EXN_ID: Overflow,
          Error: new Error()
        };
  }
  return Caml_int32.div(a, b);
}

function $tilde$neg(x) {
  if (x !== Pervasives.min_int) {
    return -x | 0;
  }
  throw {
        RE_EXN_ID: Overflow,
        Error: new Error()
      };
}

function printGreen(s) {
  return Pervasives.print_string("\x1b[32m" + (s + "\x1b[0m\n"));
}

function printRed(s) {
  return Pervasives.print_string("\x1b[31m" + (s + "\x1b[0m\n"));
}

function checkExpect(actual, expected, message) {
  if (Caml_obj.caml_equal(actual, expected)) {
    printGreen("ce_Success: " + message);
    return /* Test_Passed */0;
  } else {
    printRed("ce_Fail: " + message);
    printRed("expected output: ");
    console.log(expected);
    printRed("actual output: ");
    console.log(actual);
    return /* Test_Failed */{
            _0: {
              TAG: /* Actual_Result */0,
              _0: actual
            },
            _1: {
              TAG: /* Expected_Result */1,
              _0: expected
            }
          };
  }
}

function checkError(input, expect) {
  try {
    return /* Test_Failed */{
            _0: {
              TAG: /* Actual_Result */0,
              _0: Curry._1(input, undefined)
            },
            _1: {
              TAG: /* Expected_Error */3,
              _0: expect
            }
          };
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === "Failure") {
      var err$1 = err._1;
      if (err$1 === expect) {
        printGreen("ce_Success ");
        return /* Test_Passed */0;
      } else {
        printRed("err_Fail ");
        return /* Test_Failed */{
                _0: {
                  TAG: /* Actual_Error */2,
                  _0: err$1
                },
                _1: {
                  TAG: /* Expected_Error */3,
                  _0: expect
                }
              };
      }
    }
    throw err;
  }
}

exports.Overflow = Overflow;
exports.$plus = $plus;
exports.$neg = $neg;
exports.$star = $star;
exports.$slash = $slash;
exports.$tilde$neg = $tilde$neg;
exports.printGreen = printGreen;
exports.printRed = printRed;
exports.checkExpect = checkExpect;
exports.checkError = checkError;
/* No side effect */
