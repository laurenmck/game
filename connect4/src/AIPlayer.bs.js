// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Connect4$Connect4 = require("./Connect4.bs.js");
var CS17SetupGame$Connect4 = require("./CS17SetupGame.bs.js");

function AIPlayer(MyGame) {
  var maxValue = function (_lst) {
    while(true) {
      var lst = _lst;
      if (!lst) {
        return Pervasives.failwith("will never reach this maxValue case");
      }
      var tl = lst.tl;
      var hd = lst.hd;
      if (!tl) {
        return hd;
      }
      if (hd > maxValue(tl)) {
        return hd;
      }
      _lst = tl;
      continue ;
    };
  };
  var maxPlace = function (maxValue, lst) {
    if (maxValue === List.hd(lst)) {
      return 0;
    } else {
      return CS17SetupGame$Connect4.$plus(1, maxPlace(maxValue, List.tl(lst)));
    }
  };
  var minValue = function (_lst) {
    while(true) {
      var lst = _lst;
      if (!lst) {
        return Pervasives.failwith("will never reach this maxValue case");
      }
      var tl = lst.tl;
      var hd = lst.hd;
      if (!tl) {
        return hd;
      }
      if (hd < minValue(tl)) {
        return hd;
      }
      _lst = tl;
      continue ;
    };
  };
  var minPlace = function (minValue, lst) {
    if (minValue === List.hd(lst)) {
      return 0;
    } else {
      return CS17SetupGame$Connect4.$plus(1, minPlace(minValue, List.tl(lst)));
    }
  };
  var minimax = function (s, i) {
    var match = Curry._1(MyGame.gameStatus, s);
    if (typeof match === "number" || match.TAG === /* Win */0 || i === 0) {
      return Curry._1(MyGame.estimateValue, s);
    } else if (match._0) {
      return minValue(List.map((function (s) {
                        return minimax(s, CS17SetupGame$Connect4.$neg(i, 1));
                      }), List.map((function (m) {
                            return Curry._2(MyGame.nextState, s, m);
                          }), Curry._1(MyGame.legalMoves, s))));
    } else {
      return maxValue(List.map((function (s) {
                        return minimax(s, CS17SetupGame$Connect4.$neg(i, 1));
                      }), List.map((function (m) {
                            return Curry._2(MyGame.nextState, s, m);
                          }), Curry._1(MyGame.legalMoves, s))));
    }
  };
  var nextMove = function (s) {
    var minimaxList = List.map((function (s) {
            return minimax(s, 4);
          }), List.map((function (m) {
                return Curry._2(MyGame.nextState, s, m);
              }), Curry._1(MyGame.legalMoves, s)));
    var match = Curry._1(MyGame.gameStatus, s);
    if (typeof match === "number" || match.TAG === /* Win */0) {
      return Pervasives.failwith("should not reach this nextMove case");
    } else if (match._0) {
      return List.nth(Curry._1(MyGame.legalMoves, s), minPlace(minValue(minimaxList), minimaxList));
    } else {
      return List.nth(Curry._1(MyGame.legalMoves, s), maxPlace(maxValue(minimaxList), minimaxList));
    }
  };
  return {
          PlayerGame: MyGame,
          maxValue: maxValue,
          maxPlace: maxPlace,
          minValue: minValue,
          minPlace: minPlace,
          minimax: minimax,
          nextMove: nextMove
        };
}

var MyGame_stringOfPlayer = Connect4$Connect4.Connect4.stringOfPlayer;

var MyGame_stringOfState = Connect4$Connect4.Connect4.stringOfState;

var MyGame_stringOfMove = Connect4$Connect4.Connect4.stringOfMove;

var MyGame_initialState = Connect4$Connect4.Connect4.initialState;

var MyGame_legalMoves = Connect4$Connect4.Connect4.legalMoves;

var MyGame_gameStatus = Connect4$Connect4.Connect4.gameStatus;

var MyGame_nextState = Connect4$Connect4.Connect4.nextState;

var MyGame_moveOfString = Connect4$Connect4.Connect4.moveOfString;

var MyGame_estimateValue = Connect4$Connect4.Connect4.estimateValue;

var MyGame = {
  stringOfPlayer: MyGame_stringOfPlayer,
  stringOfState: MyGame_stringOfState,
  stringOfMove: MyGame_stringOfMove,
  initialState: MyGame_initialState,
  legalMoves: MyGame_legalMoves,
  gameStatus: MyGame_gameStatus,
  nextState: MyGame_nextState,
  moveOfString: MyGame_moveOfString,
  estimateValue: MyGame_estimateValue
};

function maxValue(_lst) {
  while(true) {
    var lst = _lst;
    if (!lst) {
      return Pervasives.failwith("will never reach this maxValue case");
    }
    var tl = lst.tl;
    var hd = lst.hd;
    if (!tl) {
      return hd;
    }
    if (hd > maxValue(tl)) {
      return hd;
    }
    _lst = tl;
    continue ;
  };
}

function maxPlace(maxValue, lst) {
  if (maxValue === List.hd(lst)) {
    return 0;
  } else {
    return CS17SetupGame$Connect4.$plus(1, maxPlace(maxValue, List.tl(lst)));
  }
}

function minValue(_lst) {
  while(true) {
    var lst = _lst;
    if (!lst) {
      return Pervasives.failwith("will never reach this maxValue case");
    }
    var tl = lst.tl;
    var hd = lst.hd;
    if (!tl) {
      return hd;
    }
    if (hd < minValue(tl)) {
      return hd;
    }
    _lst = tl;
    continue ;
  };
}

function minPlace(minValue, lst) {
  if (minValue === List.hd(lst)) {
    return 0;
  } else {
    return CS17SetupGame$Connect4.$plus(1, minPlace(minValue, List.tl(lst)));
  }
}

function minimax(s, i) {
  var match = Curry._1(Connect4$Connect4.Connect4.gameStatus, s);
  if (typeof match === "number" || match.TAG === /* Win */0 || i === 0) {
    return Curry._1(Connect4$Connect4.Connect4.estimateValue, s);
  } else if (match._0) {
    return minValue(List.map((function (s) {
                      return minimax(s, CS17SetupGame$Connect4.$neg(i, 1));
                    }), List.map((function (m) {
                          return Curry._2(Connect4$Connect4.Connect4.nextState, s, m);
                        }), Curry._1(Connect4$Connect4.Connect4.legalMoves, s))));
  } else {
    return maxValue(List.map((function (s) {
                      return minimax(s, CS17SetupGame$Connect4.$neg(i, 1));
                    }), List.map((function (m) {
                          return Curry._2(Connect4$Connect4.Connect4.nextState, s, m);
                        }), Curry._1(Connect4$Connect4.Connect4.legalMoves, s))));
  }
}

function nextMove(s) {
  var minimaxList = List.map((function (s) {
          return minimax(s, 4);
        }), List.map((function (m) {
              return Curry._2(Connect4$Connect4.Connect4.nextState, s, m);
            }), Curry._1(Connect4$Connect4.Connect4.legalMoves, s)));
  var match = Curry._1(Connect4$Connect4.Connect4.gameStatus, s);
  if (typeof match === "number" || match.TAG === /* Win */0) {
    return Pervasives.failwith("should not reach this nextMove case");
  } else if (match._0) {
    return List.nth(Curry._1(Connect4$Connect4.Connect4.legalMoves, s), minPlace(minValue(minimaxList), minimaxList));
  } else {
    return List.nth(Curry._1(Connect4$Connect4.Connect4.legalMoves, s), maxPlace(maxValue(minimaxList), minimaxList));
  }
}

var TestAIPlayer = {
  PlayerGame: MyGame,
  maxValue: maxValue,
  maxPlace: maxPlace,
  minValue: minValue,
  minPlace: minPlace,
  minimax: minimax,
  nextMove: nextMove
};

var TestGame;

exports.AIPlayer = AIPlayer;
exports.TestGame = TestGame;
exports.TestAIPlayer = TestAIPlayer;
/* Connect4-Connect4 Not a pure module */
